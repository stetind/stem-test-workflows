name: CI

on:
  workflow_call:
    inputs:
      testing-runner:
        description: 'In case of large testing process, we can define a different runner, only for PhpUnit tests'
        required: false
        type: string
        default: ubuntu-latest
    secrets:
      COMPOSER_ACCESS_TOKEN:
        required: true

env:
  PHP_VERSION: 8.1

jobs:
  duplication-check:
    name: Code duplication check
    runs-on: ubuntu-latest
    steps:
      - name: ðŸ›« Checkout
        uses: actions/checkout@v3

      - name: ðŸ”¨ Setup php
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          tools: phpcpd

      - name: ðŸ”§ Check code duplication in "src" directory
        run: phpcpd src/ --min-lines=6

  pint:
    name: Laravel Pint Linting
    runs-on: ubuntu-latest
    steps:
      - name: ðŸ›« Checkout
        uses: actions/checkout@v3

      - name: ðŸ”¨ Setup php
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}

      - name: ðŸ§™ Configure Composer
        run: composer config --auth github-oauth.github.com "${{ secrets.COMPOSER_ACCESS_TOKEN }}"

      - name: ðŸ§™ Install Dependencies
        uses: ramsey/composer-install@v2

      - name: ðŸ”§  Run linter
        run: vendor/bin/pint -vv --config ruleset-pint.json --test

#  phpmd:
#    name: Php Mess Detector - Check
#    runs-on: ubuntu-latest
#    steps:
#      - name: ðŸ›« Checkout
#        uses: actions/checkout@v3
#
#      - name: ðŸ”¨ Setup php
#        uses: shivammathur/setup-php@v2
#        with:
#          php-version: 8.1
#          tools: phpmd
#
#      - name: ðŸ”§  Run Check
#        run: phpmd src text cleancode,codesize,controversial,design,unusedcode

  analyze:
    name: PHPStan
    runs-on: ubuntu-latest
    steps:
      - name: ðŸ›« Checkout
        uses: actions/checkout@v3

      - name: ðŸ”¨ Setup php
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}

      - name: ðŸ§™ Configure Composer
        run: composer config --auth github-oauth.github.com "${{ secrets.COMPOSER_ACCESS_TOKEN }}"

      - name: ðŸ§™ Install Dependencies
        uses: ramsey/composer-install@v2
        #        https://github.com/sebastianbergmann/phpcpd/blob/21158aed508ffa2480b90f2af93724e3355c703f/.github/workflows/ci.yml#L58

      - name: ðŸ”§ Run analyzer
        run: vendor/bin/phpstan analyse --memory-limit=1G -c ruleset-phpstan.neon --error-format=github -vvv

  arch-test:
    name: Architecture Test
    runs-on: ubuntu-latest
    steps:
      - name: ðŸ›« Checkout
        uses: actions/checkout@v3

      - name: ðŸ”¨ Setup php
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}

      - name: ðŸ§™ Configure Composer
        run: composer config --auth github-oauth.github.com "${{ secrets.COMPOSER_ACCESS_TOKEN }}"

      - name: ðŸ§™ Install Dependencies
        uses: ramsey/composer-install@v2

      - name: ðŸš“ Run test
        run: |
          for CONF in deptrac.yaml deptrac-*.yaml; do
            test ! -f "$CONF" && continue || vendor/bin/deptrac --report-uncovered --fail-on-uncovered --config-file="$CONF";
          done

  security-check:
    name: Vulnerability Check
    runs-on: ubuntu-latest # be careful, we are using google-chrome, that pre-exists on ubuntu:20. Ubuntu 22 doesn't have it as default
    steps:
      - name: ðŸ›« Checkout
        uses: actions/checkout@v3

      - name: Cache the vulnerability database
        uses: actions/cache@v3
        id: cache-db
        with:
          path: ~/.symfony/cache
          key: db

      - name: ðŸ’© Run security check
        uses: symfonycorp/security-checker-action@v5
        with:
          disable-exit-code: 1

  test:
    name: PHPUnit
    runs-on: ${{ inputs.testing-runner }}
#    runs-on: ubuntu-latest
    steps:
      - name: ðŸ”¨ Setup php
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pdo, sqlite, pdo_sqlite
          coverage: xdebug

      - name: ðŸ›« Checkout
        uses: actions/checkout@v3

      - name: ðŸ§™ Configure Composer
        run: composer config --auth github-oauth.github.com "${{ secrets.COMPOSER_ACCESS_TOKEN }}"

      - name: ðŸ§™ Install Dependencies
        uses: ramsey/composer-install@v2

      - name: ðŸ”§ Execute Unit Tests
        run: vendor/bin/testbench package:test --env=true --parallel --coverage --min=90 --configuration=phpunit.xml
        env:
          APP_URL: http://127.0.0.1:8001



#  document:
#    name: Update Documentation
#    runs-on: ubuntu-latest
#    steps:
#      - name: ðŸ“– Generate documentation
#        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }} #I will only run on the main branch and not on pull request
#        uses: convictional/trigger-workflow-and-wait@v1.6.1
#        with:
#          owner: stetind
#          repo: stem-documentation
#          github_token: ${{ secrets.COMPOSER_ACCESS_TOKEN }}
#          workflow_file_name: docs.yaml
#          wait_workflow: false
